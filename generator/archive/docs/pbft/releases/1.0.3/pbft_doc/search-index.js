var searchIndex = JSON.parse('{\
"pbft_engine":{"doc":"Implementation of the PBFT consensus algorithm, modified…","i":[[3,"PbftCliArgs","pbft_engine","",null,null],[12,"log_config","","",0,null],[12,"log_level","","",0,null],[12,"endpoint","","",0,null],[12,"exponential_retry_base","","",0,null],[12,"exponential_retry_max","","",0,null],[12,"update_recv_timeout","","",0,null],[12,"max_log_size","","",0,null],[12,"storage_location","","",0,null],[5,"main","","",null,[[]]],[5,"get_console_config","","",null,[[["levelfilter",4]],["config",3]]],[5,"parse_args","","",null,[[],["pbftcliargs",3]]],[0,"config","","Initial configuration for a PBFT node",null,null],[3,"PbftConfig","pbft_engine::config","Contains the initial configuration loaded from on-chain…",null,null],[12,"members","","",1,null],[12,"block_publishing_delay","","How long to wait in between trying to publish blocks",1,null],[12,"update_recv_timeout","","How long to wait for an update to arrive from the validator",1,null],[12,"exponential_retry_base","","The base time to use for retrying with exponential backoff",1,null],[12,"exponential_retry_max","","The maximum time for retrying with exponential backoff",1,null],[12,"idle_timeout","","How long to wait for the next BlockNew + PrePrepare before…",1,null],[12,"commit_timeout","","How long to wait (after Pre-Preparing) for the node to…",1,null],[12,"view_change_duration","","When view changing, how long to wait for a valid NewView…",1,null],[12,"forced_view_change_interval","","How many blocks to commit before forcing a view change for…",1,null],[12,"max_log_size","","How large the PbftLog is allowed to get before being pruned",1,null],[12,"storage_location","","Where to store PbftState (\\\"memory\\\" or \\\"disk+/path/to/file\\\")",1,null],[5,"merge_setting_if_set","","",null,[[["hashmap",3]]]],[5,"merge_setting_if_set_and_map","","",null,[[["hashmap",3]]]],[5,"merge_millis_setting_if_set","","",null,[[["hashmap",3],["duration",3]]]],[5,"get_members_from_settings","","Get the list of PBFT members as a Vec from settings",null,[[["hashmap",3]],[["vec",3],["peerid",6]]]],[11,"default","","",1,[[]]],[11,"load_settings","","Load configuration from on-chain Sawtooth settings.",1,[[["blockid",6],["service",8]]]],[0,"engine","pbft_engine","Entry point for the consensus algorithm, including the…",null,null],[3,"PbftEngine","pbft_engine::engine","",null,null],[12,"config","","",2,null],[5,"handle_update","","",null,[[["result",4],["pbftnode",3],["recvtimeouterror",4],["pbftstate",3],["update",4]],[["pbfterror",4],["result",4]]]],[5,"log_any_error","","",null,[[["pbfterror",4],["result",4]]]],[11,"new","","",2,[[["pbftconfig",3]]]],[0,"error","pbft_engine","PBFT-specific error messages",null,null],[4,"PbftError","pbft_engine::error","Errors that might occur in a PbftNode",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing a…",3,null],[13,"ServiceError","","An error occurred while making a call to the consensus…",3,null],[13,"SigningError","","An error occurred while verifying a cryptographic signature",3,null],[13,"FaultyPrimary","","The node detected a faulty primary and started a view change",3,null],[13,"InvalidMessage","","An invalid message was received",3,null],[13,"InternalError","","Internal PBFT error (description)",3,null],[0,"hash","pbft_engine","",null,null],[5,"hash_sha512","pbft_engine::hash","Hashes the given bytes with SHA-512",null,[[],["vec",3]]],[5,"verify_sha512","","Verifies that the SHA-512 hash of the given content…",null,[[],[["pbfterror",4],["result",4]]]],[0,"message_extensions","pbft_engine","Extensions for the Protobuf-defined message types",null,null],[0,"message_log","","The message log used by PBFT nodes to save messages",null,null],[3,"PbftLog","pbft_engine::message_log","Struct for storing messages that a PbftNode receives",null,null],[12,"unvalidated_blocks","","All blocks received from the validator that have not been…",4,null],[12,"blocks","","All blocks received from the validator that have been…",4,null],[12,"messages","","All messages accepted by the node that have not been…",4,null],[12,"max_log_size","","Maximum log size",4,null],[11,"new","","Create a new, empty `PbftLog` with the `max_log_size`…",4,[[["pbftconfig",3]]]],[11,"add_validated_block","","Add an already validated `Block` to the log",4,[[["block",3]]]],[11,"add_unvalidated_block","","Add an unvalidated `Block` to the log",4,[[["block",3]]]],[11,"block_validated","","Move the `Block` corresponding to `block_id` from…",4,[[["blockid",6]],[["option",4],["block",3]]]],[11,"block_invalidated","","Drop the `Block` corresponding to `block_id` from…",4,[[["blockid",6]]]],[11,"get_blocks_with_num","","Get all `Block`s in the message log with the specified…",4,[[],[["vec",3],["block",3]]]],[11,"get_block_with_id","","Get the `Block` with the specified block ID",4,[[],[["option",4],["block",3]]]],[11,"get_unvalidated_block_with_id","","Get the `Block` with the specified block ID from…",4,[[],[["option",4],["block",3]]]],[11,"add_message","","Add a parsed PBFT message to the log",4,[[["parsedmessage",3]]]],[11,"has_pre_prepare","","Check if the log has a PrePrepare at the given view and…",4,[[]]],[11,"get_messages_of_type_seq","","Obtain all messages from the log that match the given type…",4,[[["pbftmessagetype",4]],[["vec",3],["parsedmessage",3]]]],[11,"get_messages_of_type_view","","Obtain all messages from the log that match the given type…",4,[[["pbftmessagetype",4]],[["vec",3],["parsedmessage",3]]]],[11,"get_messages_of_type_seq_view","","Obtain all messages from the log that match the given…",4,[[["pbftmessagetype",4]],[["vec",3],["parsedmessage",3]]]],[11,"get_messages_of_type_seq_view_block","","Obtain all messages from the log that match the given…",4,[[["pbftmessagetype",4]],[["vec",3],["parsedmessage",3]]]],[11,"garbage_collect","","Garbage collect the log if it has reached the `max_log_size`",4,[[]]],[0,"message_type","pbft_engine","Message types for PeerMessages",null,null],[3,"ParsedMessage","pbft_engine::message_type","Container for a received PeerMessage and the PBFT message…",null,null],[12,"header_bytes","","Serialized ConsensusPeerMessageHeader. Inserted into a…",5,null],[12,"header_signature","","Signature for `header_bytes`. Inserted into a signed vote.",5,null],[12,"message","","The parsed PBFT message.",5,null],[12,"message_bytes","","The serialized PBFT message. Inserted into a signed vote.",5,null],[12,"from_self","","Whether or not this message was self-constructed.…",5,null],[4,"PbftMessageWrapper","","Wrapper enum for all of the possible PBFT-related messages",null,null],[13,"Message","","",6,null],[13,"NewView","","",6,null],[13,"Seal","","",6,null],[4,"PbftMessageType","","",null,null],[13,"PrePrepare","","Basic message types for the multicast protocol",7,null],[13,"Prepare","","",7,null],[13,"Commit","","",7,null],[13,"NewView","","Auxiliary PBFT messages",7,null],[13,"ViewChange","","",7,null],[13,"SealRequest","","",7,null],[13,"Seal","","",7,null],[13,"Unset","","",7,null],[11,"from_peer_message","","Constructs a `ParsedMessage` from the given `PeerMessage`.",5,[[["peermessage",3]],[["pbfterror",4],["result",4]]]],[11,"from_pbft_message","","Constructs a `ParsedMessage` from the given `PbftMessage`.",5,[[["pbftmessage",3]],[["pbfterror",4],["result",4]]]],[11,"from_new_view_message","","Constructs a `ParsedMessage` from the given `PbftNewView`.",5,[[["pbftnewview",3]],[["pbfterror",4],["result",4]]]],[11,"from_signed_vote","","Constructs a `ParsedMessage` from the given…",5,[[["pbftsignedvote",3]],[["pbfterror",4],["result",4]]]],[11,"info","","",5,[[],["pbftmessageinfo",3]]],[11,"get_block_id","","Returns the `BlockId` for this message\'s wrapped…",5,[[],["blockid",6]]],[11,"get_new_view_message","","Returns the wrapped `PbftNewView`.",5,[[],["pbftnewview",3]]],[11,"get_seal","","Returns the wrapped `PbftSeal`.",5,[[],["pbftseal",3]]],[0,"node","pbft_engine","The core PBFT algorithm",null,null],[3,"PbftNode","pbft_engine::node","Contains the core logic of the PBFT node",null,null],[12,"service","","Used for interactions with the validator",8,null],[12,"msg_log","","Log of messages this node has received and accepted",8,null],[11,"new","","Construct a new PBFT node",8,[[["vec",3],["peerinfo",3],["service",8],["pbftstate",3],["pbftconfig",3],["block",3],["box",3]]]],[11,"on_peer_message","","Handle a peer message from another PbftNode",8,[[["parsedmessage",3],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"handle_pre_prepare","","Handle a `PrePrepare` message",8,[[["parsedmessage",3],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"handle_prepare","","Handle a `Prepare` message",8,[[["parsedmessage",3],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"handle_commit","","Handle a `Commit` message",8,[[["parsedmessage",3],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"handle_view_change","","Handle a `ViewChange` message",8,[[["pbftstate",3],["parsedmessage",3]],[["pbfterror",4],["result",4]]]],[11,"handle_new_view","","Handle a `NewView` message",8,[[["pbftstate",3],["parsedmessage",3]],[["pbfterror",4],["result",4]]]],[11,"handle_seal_request","","Handle a `SealRequest` message",8,[[["parsedmessage",3],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"handle_seal_response","","Handle a `Seal` message",8,[[["pbftstate",3],["parsedmessage",3]],[["pbfterror",4],["result",4]]]],[11,"on_block_new","","Handle a `BlockNew` update from the Validator",8,[[["pbftstate",3],["block",3]],[["pbfterror",4],["result",4]]]],[11,"on_block_valid","","Handle a `BlockValid` update from the Validator",8,[[["blockid",6],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"try_handling_block","","Validate the block\'s seal and handle the block. If this is…",8,[[["pbftstate",3],["block",3]],[["pbfterror",4],["result",4]]]],[11,"on_block_invalid","","Handle a `BlockInvalid` update from the Validator",8,[[["blockid",6]],[["pbfterror",4],["result",4]]]],[11,"catchup","","Use the given consensus seal to verify and commit the…",8,[[["pbftstate",3],["pbftseal",3]],[["pbfterror",4],["result",4]]]],[11,"on_block_commit","","Handle a `BlockCommit` update from the Validator",8,[[["blockid",6],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"update_membership","","Check the on-chain list of members; if it has changed,…",8,[[["blockid",6],["pbftstate",3]]]],[11,"try_preparing","","When the node has a block and a corresponding PrePrepare…",8,[[["blockid",6],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"on_peer_connected","","Handle a `PeerConnected` update from the Validator",8,[[["peerid",6],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"broadcast_bootstrap_commit","","When the whole network is starting \\\"fresh\\\" from a…",8,[[["peerid",6],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"signed_votes_from_messages","","Generate a `protobuf::RepeatedField` of signed votes from…",8,[[],[["pbftsignedvote",3],["repeatedfield",3]]]],[11,"build_seal","","Build a consensus seal that proves the last block…",8,[[["pbftstate",3]],[["result",4],["pbftseal",3],["pbfterror",4]]]],[11,"verify_vote","","Verify that a vote matches the expected type, is properly…",8,[[["pbftmessagetype",4],["pbftsignedvote",3]],[["peerid",6],["pbfterror",4],["result",4]]]],[11,"verify_new_view","","Verify that a NewView messsage is valid",8,[[["pbftstate",3],["pbftnewview",3]],[["pbfterror",4],["result",4]]]],[11,"verify_consensus_seal_from_block","","Verify the consensus seal from the current block that…",8,[[["block",3],["pbftstate",3]],[["result",4],["pbftseal",3],["pbfterror",4]]]],[11,"verify_consensus_seal","","Verify the given consenus seal",8,[[["blockid",6],["pbftseal",3],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"try_publish","","At a regular interval, try to finalize a block when the…",8,[[["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"check_idle_timeout_expired","","Check to see if the idle timeout has expired",8,[[["pbftstate",3]]]],[11,"start_idle_timeout","","Start the idle timeout",8,[[["pbftstate",3]]]],[11,"check_commit_timeout_expired","","Check to see if the commit timeout has expired",8,[[["pbftstate",3]]]],[11,"start_commit_timeout","","Start the commit timeout",8,[[["pbftstate",3]]]],[11,"check_view_change_timeout_expired","","Check to see if the view change timeout has expired",8,[[["pbftstate",3]]]],[11,"broadcast_pbft_message","","Construct a PbftMessage message and broadcast it to all…",8,[[["blockid",6],["pbftmessagetype",4],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"broadcast_message","","Broadcast the specified message to all of the node\'s…",8,[[["parsedmessage",3],["pbftstate",3]],[["pbfterror",4],["result",4]]]],[11,"send_seal_response","","Build a consensus seal for the last block this node…",8,[[["pbftstate",3],["peerid",6]],[["pbfterror",4],["result",4]]]],[11,"start_view_change","","Start a view change when this node suspects that the…",8,[[["pbftstate",3]],[["pbfterror",4],["result",4]]]],[0,"protos","pbft_engine","",null,null],[0,"pbft_message","pbft_engine::protos","Generated file from `pbft_message.proto`",null,null],[3,"PbftMessageInfo","pbft_engine::protos::pbft_message","Generated files are compatible only with the same version…",null,null],[12,"msg_type","","",9,null],[12,"view","","",9,null],[12,"seq_num","","",9,null],[12,"signer_id","","",9,null],[12,"unknown_fields","","",9,null],[12,"cached_size","","",9,null],[3,"PbftMessage","","",null,null],[12,"info","","",10,null],[12,"block_id","","",10,null],[12,"unknown_fields","","",10,null],[12,"cached_size","","",10,null],[3,"PbftNewView","","",null,null],[12,"info","","",11,null],[12,"view_changes","","",11,null],[12,"unknown_fields","","",11,null],[12,"cached_size","","",11,null],[3,"PbftSignedVote","","",null,null],[12,"header_bytes","","",12,null],[12,"header_signature","","",12,null],[12,"message_bytes","","",12,null],[12,"unknown_fields","","",12,null],[12,"cached_size","","",12,null],[3,"PbftSeal","","",null,null],[12,"info","","",13,null],[12,"block_id","","",13,null],[12,"commit_votes","","",13,null],[12,"unknown_fields","","",13,null],[12,"cached_size","","",13,null],[5,"parse_descriptor_proto","","",null,[[],["filedescriptorproto",3]]],[5,"file_descriptor_proto","","",null,[[],["filedescriptorproto",3]]],[7,"file_descriptor_proto_data","","",null,null],[7,"file_descriptor_proto_lazy","","",null,null],[11,"new","","",9,[[],["pbftmessageinfo",3]]],[11,"get_msg_type","","",9,[[]]],[11,"clear_msg_type","","",9,[[]]],[11,"set_msg_type","","",9,[[["string",3]]]],[11,"mut_msg_type","","",9,[[],["string",3]]],[11,"take_msg_type","","",9,[[],["string",3]]],[11,"get_view","","",9,[[]]],[11,"clear_view","","",9,[[]]],[11,"set_view","","",9,[[]]],[11,"get_seq_num","","",9,[[]]],[11,"clear_seq_num","","",9,[[]]],[11,"set_seq_num","","",9,[[]]],[11,"get_signer_id","","",9,[[]]],[11,"clear_signer_id","","",9,[[]]],[11,"set_signer_id","","",9,[[["vec",3]]]],[11,"mut_signer_id","","",9,[[],["vec",3]]],[11,"take_signer_id","","",9,[[],["vec",3]]],[11,"new","","",10,[[],["pbftmessage",3]]],[11,"get_info","","",10,[[],["pbftmessageinfo",3]]],[11,"clear_info","","",10,[[]]],[11,"has_info","","",10,[[]]],[11,"set_info","","",10,[[["pbftmessageinfo",3]]]],[11,"mut_info","","",10,[[],["pbftmessageinfo",3]]],[11,"take_info","","",10,[[],["pbftmessageinfo",3]]],[11,"get_block_id","","",10,[[]]],[11,"clear_block_id","","",10,[[]]],[11,"set_block_id","","",10,[[["vec",3]]]],[11,"mut_block_id","","",10,[[],["vec",3]]],[11,"take_block_id","","",10,[[],["vec",3]]],[11,"new","","",11,[[],["pbftnewview",3]]],[11,"get_info","","",11,[[],["pbftmessageinfo",3]]],[11,"clear_info","","",11,[[]]],[11,"has_info","","",11,[[]]],[11,"set_info","","",11,[[["pbftmessageinfo",3]]]],[11,"mut_info","","",11,[[],["pbftmessageinfo",3]]],[11,"take_info","","",11,[[],["pbftmessageinfo",3]]],[11,"get_view_changes","","",11,[[]]],[11,"clear_view_changes","","",11,[[]]],[11,"set_view_changes","","",11,[[["repeatedfield",3],["pbftsignedvote",3]]]],[11,"mut_view_changes","","",11,[[],["repeatedfield",3]]],[11,"take_view_changes","","",11,[[],[["repeatedfield",3],["pbftsignedvote",3]]]],[11,"new","","",12,[[],["pbftsignedvote",3]]],[11,"get_header_bytes","","",12,[[]]],[11,"clear_header_bytes","","",12,[[]]],[11,"set_header_bytes","","",12,[[["vec",3]]]],[11,"mut_header_bytes","","",12,[[],["vec",3]]],[11,"take_header_bytes","","",12,[[],["vec",3]]],[11,"get_header_signature","","",12,[[]]],[11,"clear_header_signature","","",12,[[]]],[11,"set_header_signature","","",12,[[["vec",3]]]],[11,"mut_header_signature","","",12,[[],["vec",3]]],[11,"take_header_signature","","",12,[[],["vec",3]]],[11,"get_message_bytes","","",12,[[]]],[11,"clear_message_bytes","","",12,[[]]],[11,"set_message_bytes","","",12,[[["vec",3]]]],[11,"mut_message_bytes","","",12,[[],["vec",3]]],[11,"take_message_bytes","","",12,[[],["vec",3]]],[11,"new","","",13,[[],["pbftseal",3]]],[11,"get_info","","",13,[[],["pbftmessageinfo",3]]],[11,"clear_info","","",13,[[]]],[11,"has_info","","",13,[[]]],[11,"set_info","","",13,[[["pbftmessageinfo",3]]]],[11,"mut_info","","",13,[[],["pbftmessageinfo",3]]],[11,"take_info","","",13,[[],["pbftmessageinfo",3]]],[11,"get_block_id","","",13,[[]]],[11,"clear_block_id","","",13,[[]]],[11,"set_block_id","","",13,[[["vec",3]]]],[11,"mut_block_id","","",13,[[],["vec",3]]],[11,"take_block_id","","",13,[[],["vec",3]]],[11,"get_commit_votes","","",13,[[]]],[11,"clear_commit_votes","","",13,[[]]],[11,"set_commit_votes","","",13,[[["repeatedfield",3],["pbftsignedvote",3]]]],[11,"mut_commit_votes","","",13,[[],["repeatedfield",3]]],[11,"take_commit_votes","","",13,[[],[["repeatedfield",3],["pbftsignedvote",3]]]],[0,"state","pbft_engine","Information about a PBFT node\'s state",null,null],[3,"PbftState","pbft_engine::state","Information about the PBFT algorithm\'s state",null,null],[12,"id","","This node\'s ID",14,null],[12,"seq_num","","The node\'s current sequence number",14,null],[12,"view","","The current view",14,null],[12,"chain_head","","The block ID of the node\'s current chain head",14,null],[12,"phase","","Current phase of the algorithm",14,null],[12,"mode","","Normal operation or view changing",14,null],[12,"member_ids","","List of members in the PBFT network, including this node",14,null],[12,"f","","The maximum number of faulty nodes in the network",14,null],[12,"idle_timeout","","Timer used to make sure the primary publishes blocks in a…",14,null],[12,"commit_timeout","","Timer used to make sure the network doesn\'t get stuck if…",14,null],[12,"view_change_timeout","","When view changing, timer is used to make sure a valid…",14,null],[12,"view_change_duration","","The duration of the view change timeout; when a view…",14,null],[12,"exponential_retry_base","","The base time to use for retrying with exponential backoff",14,null],[12,"exponential_retry_max","","The maximum time for retrying with exponential backoff",14,null],[12,"forced_view_change_interval","","How many blocks to commit before forcing a view change for…",14,null],[4,"PbftPhase","","Phases of the PBFT algorithm, in `Normal` mode",null,null],[13,"PrePreparing","","",15,null],[13,"Preparing","","",15,null],[13,"Committing","","",15,null],[13,"Finishing","","",15,null],[4,"PbftMode","","Modes that the PBFT algorithm can possibly be in",null,null],[13,"Normal","","",16,null],[13,"ViewChanging","","Contains the view number of the view this node is…",16,null],[11,"new","","Construct the initial state for a PBFT node",14,[[["peerid",6],["pbftconfig",3]]]],[11,"get_primary_id","","Obtain the ID for the primary node in the network",14,[[],["peerid",6]]],[11,"get_primary_id_at_view","","Obtain the ID for the primary node at the specified view",14,[[],["peerid",6]]],[11,"is_primary","","Tell if this node is currently the primary",14,[[]]],[11,"is_primary_at_view","","Tell if this node is the primary at the specified view",14,[[]]],[11,"switch_phase","","Switch to the desired phase if it is the next phase of the…",14,[[["pbftphase",4]],[["pbfterror",4],["result",4]]]],[11,"at_forced_view_change","","",14,[[]]],[0,"storage","pbft_engine","Storage trait for syncing writes to an object to a backing…",null,null],[5,"get_storage","pbft_engine::storage","Given a location string, returns the appropriate storage",null,[[["fn",8]],[["box",3],["result",4],["string",3]]]],[0,"disk","","Disk-backed persistence wrapper",null,null],[3,"DiskStorageReadGuard","pbft_engine::storage::disk","A disk-based read guard",null,null],[12,"storage","","",17,null],[3,"DiskStorageWriteGuard","","A disk-based write guard",null,null],[12,"storage","","",18,null],[3,"DiskStorage","","A disk-based RAII-guarded Storage implementation",null,null],[12,"data","","",19,null],[12,"file","","",19,null],[11,"new","","",17,[[["diskstorage",3]]]],[11,"new","","",18,[[["diskstorage",3]]]],[11,"from_path","","",19,[[["into",8],["fn",8],["string",3]],[["result",4],["string",3]]]],[0,"memory","pbft_engine::storage","Memory-backed persistence wrapper",null,null],[3,"MemStorageReadGuard","pbft_engine::storage::memory","Memory-backed read guard",null,null],[12,"storage","","",20,null],[3,"MemStorageWriteGuard","","Memory-backed write guard",null,null],[12,"storage","","",21,null],[3,"MemStorage","","Memory-backed RAII-guarded Storage implementation",null,null],[12,"data","","",22,null],[11,"new","","",20,[[["memstorage",3]]]],[11,"new","","",21,[[["memstorage",3]]]],[11,"new","","",22,[[["fn",8]]]],[8,"StorageReadGuard","pbft_engine::storage","RAII structure used to allow read access to state object",null,null],[8,"StorageWriteGuard","","RAII structure used to allow write access to state object",null,null],[8,"Storage","","Storage wrapper that ensures that changes to an object are…",null,null],[16,"S","","",23,null],[10,"read","","",23,[[],[["box",3],["storagereadguard",8]]]],[10,"write","","",23,[[],[["box",3],["storagewriteguard",8]]]],[0,"timing","pbft_engine","Timing-related structures",null,null],[3,"Ticker","pbft_engine::timing","Encapsulates calling a function every so often",null,null],[12,"last","","",24,null],[12,"timeout","","",24,null],[3,"Timeout","","A timer that expires after a given duration Check back on…",null,null],[12,"state","","",25,null],[12,"duration","","",25,null],[12,"start","","",25,null],[4,"TimeoutState","","",null,null],[13,"Active","","",26,null],[13,"Inactive","","",26,null],[13,"Expired","","",26,null],[5,"retry_until_ok","","With exponential backoff, repeatedly try the callback…",null,[[["duration",3],["fnmut",8]]]],[11,"new","","",24,[[["duration",3]]]],[11,"tick","","",24,[[["fnmut",8]]]],[11,"new","","",25,[[["duration",3]]]],[11,"check_expired","","Update the timer state, and check if the timer is expired",25,[[]]],[11,"start","","",25,[[]]],[11,"stop","","",25,[[]]],[11,"is_active","","",25,[[]]],[11,"from","pbft_engine","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone_any","","",0,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",0,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",0,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",0,[[],[["cloneany",8],["box",3]]]],[11,"from","pbft_engine::config","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","pbft_engine::engine","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","pbft_engine::error","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","pbft_engine::message_log","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","pbft_engine::message_type","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"clone_any","","",5,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",5,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",5,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",5,[[],[["cloneany",8],["box",3]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"clone_any","","",6,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",6,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",6,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",6,[[],[["cloneany",8],["box",3]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"clone_any","","",7,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",7,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",7,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",7,[[],[["cloneany",8],["box",3]]]],[11,"from","pbft_engine::node","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","pbft_engine::protos::pbft_message","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"clone_any","","",9,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",9,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",9,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",9,[[],[["cloneany",8],["box",3]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"clone_any","","",10,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",10,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",10,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",10,[[],[["cloneany",8],["box",3]]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"clone_any","","",11,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",11,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",11,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",11,[[],[["cloneany",8],["box",3]]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"clone_any","","",12,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",12,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",12,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",12,[[],[["cloneany",8],["box",3]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"clone_any","","",13,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",13,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",13,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",13,[[],[["cloneany",8],["box",3]]]],[11,"from","pbft_engine::state","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"clone_any","","",15,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",15,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",15,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",15,[[],[["cloneany",8],["box",3]]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"clone_any","","",16,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send","","",16,[[],[["box",3],["cloneany",8]]]],[11,"clone_any_sync","","",16,[[],[["cloneany",8],["box",3]]]],[11,"clone_any_send_sync","","",16,[[],[["cloneany",8],["box",3]]]],[11,"from","pbft_engine::storage::disk","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","pbft_engine::storage::memory","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_string","","",20,[[],["string",3]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","pbft_engine::timing","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"read","pbft_engine::storage::disk","",19,[[],[["storagereadguard",8],["box",3]]]],[11,"write","","",19,[[],[["box",3],["storagewriteguard",8]]]],[11,"read","pbft_engine::storage::memory","",22,[[],[["storagereadguard",8],["box",3]]]],[11,"write","","",22,[[],[["box",3],["storagewriteguard",8]]]],[11,"drop","pbft_engine::storage::disk","",18,[[]]],[11,"from","pbft_engine::message_type","",7,[[]]],[11,"clone","","",6,[[],["pbftmessagewrapper",4]]],[11,"clone","","",5,[[],["parsedmessage",3]]],[11,"clone","","",7,[[],["pbftmessagetype",4]]],[11,"clone","pbft_engine::protos::pbft_message","",9,[[],["pbftmessageinfo",3]]],[11,"clone","","",10,[[],["pbftmessage",3]]],[11,"clone","","",11,[[],["pbftnewview",3]]],[11,"clone","","",12,[[],["pbftsignedvote",3]]],[11,"clone","","",13,[[],["pbftseal",3]]],[11,"clone","pbft_engine::state","",15,[[],["pbftphase",4]]],[11,"clone","","",16,[[],["pbftmode",4]]],[11,"clone","pbft_engine","",0,[[],["pbftcliargs",3]]],[11,"default","pbft_engine::protos::pbft_message","",9,[[],["pbftmessageinfo",3]]],[11,"default","","",10,[[],["pbftmessage",3]]],[11,"default","","",11,[[],["pbftnewview",3]]],[11,"default","","",12,[[],["pbftsignedvote",3]]],[11,"default","","",13,[[],["pbftseal",3]]],[11,"eq","pbft_engine::message_type","",6,[[["pbftmessagewrapper",4]]]],[11,"ne","","",6,[[["pbftmessagewrapper",4]]]],[11,"eq","","",5,[[["parsedmessage",3]]]],[11,"ne","","",5,[[["parsedmessage",3]]]],[11,"eq","","",7,[[["pbftmessagetype",4]]]],[11,"eq","pbft_engine::protos::pbft_message","",9,[[["pbftmessageinfo",3]]]],[11,"ne","","",9,[[["pbftmessageinfo",3]]]],[11,"eq","","",10,[[["pbftmessage",3]]]],[11,"ne","","",10,[[["pbftmessage",3]]]],[11,"eq","","",11,[[["pbftnewview",3]]]],[11,"ne","","",11,[[["pbftnewview",3]]]],[11,"eq","","",12,[[["pbftsignedvote",3]]]],[11,"ne","","",12,[[["pbftsignedvote",3]]]],[11,"eq","","",13,[[["pbftseal",3]]]],[11,"ne","","",13,[[["pbftseal",3]]]],[11,"eq","pbft_engine::state","",15,[[["pbftphase",4]]]],[11,"ne","","",15,[[["pbftphase",4]]]],[11,"eq","","",16,[[["pbftmode",4]]]],[11,"ne","","",16,[[["pbftmode",4]]]],[11,"eq","pbft_engine::timing","",26,[[["timeoutstate",4]]]],[11,"partial_cmp","pbft_engine::message_type","",7,[[["pbftmessagetype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","pbft_engine::state","",15,[[["pbftphase",4]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["pbftphase",4]]]],[11,"le","","",15,[[["pbftphase",4]]]],[11,"gt","","",15,[[["pbftphase",4]]]],[11,"ge","","",15,[[["pbftphase",4]]]],[11,"deref","pbft_engine::storage::disk","",17,[[]]],[11,"deref","","",18,[[]]],[11,"deref","pbft_engine::storage::memory","",20,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","pbft_engine::storage::disk","",18,[[]]],[11,"deref_mut","pbft_engine::storage::memory","",21,[[]]],[11,"fmt","pbft_engine::config","",1,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::error","",3,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::message_type","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::protos::pbft_message","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::state","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::storage::memory","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::timing","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::error","",3,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::protos::pbft_message","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::message_log","",4,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::message_type","",7,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::state","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::storage::disk","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","pbft_engine::storage::memory","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"hash","pbft_engine::protos::pbft_message","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",11,[[]]],[11,"hash","pbft_engine::message_type","",5,[[]]],[11,"source","pbft_engine::error","",3,[[],[["error",8],["option",4]]]],[11,"serialize","pbft_engine::protos::pbft_message","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","pbft_engine::state","",15,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","pbft_engine::timing","",26,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"deserialize","pbft_engine::protos::pbft_message","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","pbft_engine::state","",15,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","pbft_engine::timing","",26,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"start","pbft_engine::engine","",2,[[["receiver",3],["startupstate",3],["box",3],["service",8],["update",4]],[["error",4],["result",4]]]],[11,"version","","",2,[[],["string",3]]],[11,"name","","",2,[[],["string",3]]],[11,"additional_protocols","","",2,[[],["vec",3]]],[11,"is_initialized","pbft_engine::protos::pbft_message","",9,[[]]],[11,"merge_from","","",9,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",9,[[]]],[11,"write_to_with_cached_sizes","","",9,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",9,[[]]],[11,"get_unknown_fields","","",9,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",9,[[],["unknownfields",3]]],[11,"as_any","","",9,[[],["any",8]]],[11,"as_any_mut","","",9,[[],["any",8]]],[11,"into_any","","",9,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",9,[[],["messagedescriptor",3]]],[11,"new","","",9,[[],["pbftmessageinfo",3]]],[11,"descriptor_static","","",9,[[],["messagedescriptor",3]]],[11,"default_instance","","",9,[[],["pbftmessageinfo",3]]],[11,"is_initialized","","",10,[[]]],[11,"merge_from","","",10,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",10,[[]]],[11,"write_to_with_cached_sizes","","",10,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",10,[[]]],[11,"get_unknown_fields","","",10,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",10,[[],["unknownfields",3]]],[11,"as_any","","",10,[[],["any",8]]],[11,"as_any_mut","","",10,[[],["any",8]]],[11,"into_any","","",10,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",10,[[],["messagedescriptor",3]]],[11,"new","","",10,[[],["pbftmessage",3]]],[11,"descriptor_static","","",10,[[],["messagedescriptor",3]]],[11,"default_instance","","",10,[[],["pbftmessage",3]]],[11,"is_initialized","","",11,[[]]],[11,"merge_from","","",11,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",11,[[]]],[11,"write_to_with_cached_sizes","","",11,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",11,[[]]],[11,"get_unknown_fields","","",11,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",11,[[],["unknownfields",3]]],[11,"as_any","","",11,[[],["any",8]]],[11,"as_any_mut","","",11,[[],["any",8]]],[11,"into_any","","",11,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",11,[[],["messagedescriptor",3]]],[11,"new","","",11,[[],["pbftnewview",3]]],[11,"descriptor_static","","",11,[[],["messagedescriptor",3]]],[11,"default_instance","","",11,[[],["pbftnewview",3]]],[11,"is_initialized","","",12,[[]]],[11,"merge_from","","",12,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",12,[[]]],[11,"write_to_with_cached_sizes","","",12,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",12,[[]]],[11,"get_unknown_fields","","",12,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",12,[[],["unknownfields",3]]],[11,"as_any","","",12,[[],["any",8]]],[11,"as_any_mut","","",12,[[],["any",8]]],[11,"into_any","","",12,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",12,[[],["messagedescriptor",3]]],[11,"new","","",12,[[],["pbftsignedvote",3]]],[11,"descriptor_static","","",12,[[],["messagedescriptor",3]]],[11,"default_instance","","",12,[[],["pbftsignedvote",3]]],[11,"is_initialized","","",13,[[]]],[11,"merge_from","","",13,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",13,[[]]],[11,"write_to_with_cached_sizes","","",13,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",13,[[]]],[11,"get_unknown_fields","","",13,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",13,[[],["unknownfields",3]]],[11,"as_any","","",13,[[],["any",8]]],[11,"as_any_mut","","",13,[[],["any",8]]],[11,"into_any","","",13,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",13,[[],["messagedescriptor",3]]],[11,"new","","",13,[[],["pbftseal",3]]],[11,"descriptor_static","","",13,[[],["messagedescriptor",3]]],[11,"default_instance","","",13,[[],["pbftseal",3]]],[11,"clear","","",9,[[]]],[11,"clear","","",10,[[]]],[11,"clear","","",11,[[]]],[11,"clear","","",12,[[]]],[11,"clear","","",13,[[]]],[11,"as_ref","","",9,[[],["reflectvalueref",4]]],[11,"as_ref","","",10,[[],["reflectvalueref",4]]],[11,"as_ref","","",11,[[],["reflectvalueref",4]]],[11,"as_ref","","",12,[[],["reflectvalueref",4]]],[11,"as_ref","","",13,[[],["reflectvalueref",4]]],[11,"new_from","","",9,[[["peerid",6],["pbftmessagetype",4]]]]],"p":[[3,"PbftCliArgs"],[3,"PbftConfig"],[3,"PbftEngine"],[4,"PbftError"],[3,"PbftLog"],[3,"ParsedMessage"],[4,"PbftMessageWrapper"],[4,"PbftMessageType"],[3,"PbftNode"],[3,"PbftMessageInfo"],[3,"PbftMessage"],[3,"PbftNewView"],[3,"PbftSignedVote"],[3,"PbftSeal"],[3,"PbftState"],[4,"PbftPhase"],[4,"PbftMode"],[3,"DiskStorageReadGuard"],[3,"DiskStorageWriteGuard"],[3,"DiskStorage"],[3,"MemStorageReadGuard"],[3,"MemStorageWriteGuard"],[3,"MemStorage"],[8,"Storage"],[3,"Ticker"],[3,"Timeout"],[4,"TimeoutState"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);