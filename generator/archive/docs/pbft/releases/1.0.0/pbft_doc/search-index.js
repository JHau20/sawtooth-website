var N=null,E="",T="t",U="u",searchIndex={};
var R=["peerid","pbft_engine","pbfterror","pbftconfig","block","parsedmessage","Obtain all messages from the log that match the given type…","pbftmessagetype","Obtain all messages from the log that match the given…","NewView","result","pbftnewview","service","peerinfo","pbftstate","blockid","idle_timeout","commit_timeout","view_change_duration","exponential_retry_base","The base time to use for retrying with exponential backoff","exponential_retry_max","The maximum time for retrying with exponential backoff","forced_view_change_interval","How many blocks to commit before forcing a view change for…","string","pbft_engine::storage","storagereadguard","storagewriteguard","duration","cloneany","pbft_engine::config","try_from","try_into","borrow_mut","pbft_engine::engine","type_id","pbft_engine::error","to_string","pbft_engine::message_log","borrow","typeid","pbft_engine::message_type","to_owned","clone_into","clone_any","clone_any_send","clone_any_sync","clone_any_send_sync","pbft_engine::node","pbft_engine::state","pbft_engine::storage::disk","pbft_engine::storage::memory","pbft_engine::timing","pbftphase","ordering","partial_cmp","pbftmessagewrapper","pbftmode","deref_mut","formatter","serialize","deserialize","PbftConfig","PbftEngine","PbftError","ParsedMessage","PbftMessageWrapper","PbftMessageType","PbftNode","PbftState","PbftPhase","PbftMode","DiskStorage","MemStorage","PbftCliArgs","DiskStorageReadGuard","DiskStorageWriteGuard","MemStorageReadGuard","MemStorageWriteGuard"];

searchIndex["pbft_engine"]={"doc":"Implementation of the PBFT consensus algorithm, modified…","i":[[3,R[75],R[1],E,N,N],[0,"config",E,"Initial configuration for a PBFT node",N,N],[3,R[63],R[31],"Contains the initial configuration loaded from on-chain…",N,N],[12,"members",E,E,0,N],[12,"block_publishing_delay",E,"How long to wait in between trying to publish blocks",0,N],[12,"update_recv_timeout",E,"How long to wait for an update to arrive from the validator",0,N],[12,R[19],E,R[20],0,N],[12,R[21],E,R[22],0,N],[12,R[16],E,"How long to wait for the next BlockNew + PrePrepare before…",0,N],[12,R[17],E,"How long to wait (after Pre-Preparing) for the node to…",0,N],[12,R[18],E,"When view changing, how long to wait for a valid NewView…",0,N],[12,R[23],E,R[24],0,N],[12,"max_log_size",E,"How large the PbftLog is allowed to get before being pruned",0,N],[12,"storage_location",E,"Where to store PbftState (\"memory\" or \"disk+/path/to/file\")",0,N],[5,"get_members_from_settings",E,"Get the list of PBFT members as a Vec from settings",N,[[["hashmap"]],[["vec",[R[0]]],[R[0]]]]],[11,"default",E,E,0,[[],["self"]]],[11,"load_settings",E,"Load configuration from on-chain Sawtooth settings.",0,[[["self"],[R[15]],[R[12]]]]],[0,"engine",R[1],"Entry point for the consensus algorithm, including the…",N,N],[3,R[64],R[35],E,N,N],[11,"new",E,E,1,[[[R[3]]],["self"]]],[0,"error",R[1],"PBFT-specific error messages",N,N],[4,R[65],R[37],"Errors that might occur in a PbftNode",N,N],[13,"SerializationError",E,"An error occurred while serializing or deserializing a…",2,N],[13,"ServiceError",E,"An error occurred while making a call to the consensus…",2,N],[13,"SigningError",E,"An error occurred while verifying a cryptographic signature",2,N],[13,"FaultyPrimary",E,"The node detected a faulty primary and started a view change",2,N],[13,"InvalidMessage",E,"An invalid message was received",2,N],[13,"InternalError",E,"Internal PBFT error (description)",2,N],[0,"hash",R[1],E,N,N],[5,"hash_sha512","pbft_engine::hash","Hashes the given bytes with SHA-512",N,[[],[["u8"],["vec",["u8"]]]]],[5,"verify_sha512",E,"Verifies that the SHA-512 hash of the given content…",N,[[],[[R[2]],[R[10],[R[2]]]]]],[0,"message_extensions",R[1],"Extensions for the Protobuf-defined message types",N,N],[0,"message_log",E,"The message log used by PBFT nodes to save messages",N,N],[3,"PbftLog",R[39],"Struct for storing messages that a PbftNode receives",N,N],[11,"new",E,"Create a new, empty `PbftLog` with the `max_log_size`…",3,[[[R[3]]],["self"]]],[11,"add_block",E,"Add a `Block` to the log",3,[[["self"],[R[4]]]]],[11,"get_blocks_with_num",E,"Get all `Block`s in the message log with the specified…",3,[[["self"],["u64"]],[["vec",[R[4]]],[R[4]]]]],[11,"get_block_with_id",E,"Get the `Block` with the specified block ID",3,[[["self"]],[[R[4]],["option",[R[4]]]]]],[11,"add_message",E,"Add a parsed PBFT message to the log",3,[[["self"],[R[5]]]]],[11,"has_pre_prepare",E,"Check if the log has a PrePrepare at the given view and…",3,[[["self"],["u64"]],["bool"]]],[11,"get_messages_of_type_seq",E,R[6],3,[[["self"],[R[7]],["u64"]],[[R[5]],["vec",[R[5]]]]]],[11,"get_messages_of_type_view",E,R[6],3,[[["self"],[R[7]],["u64"]],[[R[5]],["vec",[R[5]]]]]],[11,"get_messages_of_type_seq_view",E,R[8],3,[[[R[7]],["self"],["u64"]],[[R[5]],["vec",[R[5]]]]]],[11,"get_messages_of_type_seq_view_block",E,R[8],3,[[[R[7]],["self"],["u64"]],[[R[5]],["vec",[R[5]]]]]],[11,"garbage_collect",E,"Garbage collect the log if it has reached the `max_log_size`",3,[[["self"],["u64"]]]],[0,"message_type",R[1],"Message types for PeerMessages",N,N],[3,R[66],R[42],"Container for a received PeerMessage and the PBFT message…",N,N],[12,"header_bytes",E,"Serialized ConsensusPeerMessageHeader. Inserted into a…",4,N],[12,"header_signature",E,"Signature for `header_bytes`. Inserted into a signed vote.",4,N],[12,"message",E,"The parsed PBFT message.",4,N],[12,"message_bytes",E,"The serialized PBFT message. Inserted into a signed vote.",4,N],[12,"from_self",E,"Whether or not this message was self-constructed.…",4,N],[4,R[67],E,"Wrapper enum for all of the possible PBFT-related messages",N,N],[13,"Message",E,E,5,N],[13,R[9],E,E,5,N],[13,"Seal",E,E,5,N],[4,R[68],E,E,N,N],[13,"PrePrepare",E,"Basic message types for the multicast protocol",6,N],[13,"Prepare",E,E,6,N],[13,"Commit",E,E,6,N],[13,R[9],E,"Auxiliary PBFT messages",6,N],[13,"ViewChange",E,E,6,N],[13,"SealRequest",E,E,6,N],[13,"Seal",E,E,6,N],[13,"Unset",E,E,6,N],[11,"from_peer_message",E,"Constructs a `ParsedMessage` from the given `PeerMessage`.",4,[[["peermessage"]],[[R[2]],[R[10],[R[2]]]]]],[11,"from_pbft_message",E,"Constructs a `ParsedMessage` from the given `PbftMessage`.",4,[[["pbftmessage"]],[[R[2]],[R[10],[R[2]]]]]],[11,"from_new_view_message",E,"Constructs a `ParsedMessage` from the given `PbftNewView`.",4,[[[R[11]]],[[R[2]],[R[10],[R[2]]]]]],[11,"from_signed_vote",E,"Constructs a `ParsedMessage` from the given…",4,[[["pbftsignedvote"]],[[R[2]],[R[10],[R[2]]]]]],[11,"info",E,E,4,[[["self"]],["pbftmessageinfo"]]],[11,"get_block_id",E,"Returns the `BlockId` for this message's wrapped…",4,[[["self"]],[R[15]]]],[11,"get_new_view_message",E,"Returns the wrapped `PbftNewView`.",4,[[["self"]],[R[11]]]],[11,"get_seal",E,"Returns the wrapped `PbftSeal`.",4,[[["self"]],["pbftseal"]]],[0,"node",R[1],"The core PBFT algorithm",N,N],[3,R[69],R[49],"Contains the core logic of the PBFT node",N,N],[12,R[12],E,"Used for interactions with the validator",7,N],[12,"msg_log",E,"Log of messages this node has received and accepted",7,N],[11,"new",E,"Construct a new PBFT node",7,[[[R[4]],[R[3]],["box",[R[12]]],["vec",[R[13]]],[R[12]],[R[14]],[R[13]]],["self"]]],[11,"on_peer_message",E,"Handle a peer message from another PbftNode",7,[[["self"],[R[14]],[R[5]]],[[R[2]],[R[10],[R[2]]]]]],[11,"on_block_new",E,"Handle a `BlockNew` update from the Validator",7,[[["self"],[R[14]],[R[4]]],[[R[2]],[R[10],[R[2]]]]]],[11,"on_block_commit",E,"Handle a `BlockCommit` update from the Validator",7,[[["self"],[R[15]],[R[14]]],[[R[2]],[R[10],[R[2]]]]]],[11,"on_peer_connected",E,"Handle a `PeerConnected` update from the Validator",7,[[["self"],[R[0]],[R[14]]],[[R[2]],[R[10],[R[2]]]]]],[11,"try_publish",E,"At a regular interval, try to finalize a block when the…",7,[[["self"],[R[14]]],[[R[2]],[R[10],[R[2]]]]]],[11,"check_idle_timeout_expired",E,"Check to see if the idle timeout has expired",7,[[["self"],[R[14]]],["bool"]]],[11,"start_idle_timeout",E,"Start the idle timeout",7,[[["self"],[R[14]]]]],[11,"check_commit_timeout_expired",E,"Check to see if the commit timeout has expired",7,[[["self"],[R[14]]],["bool"]]],[11,"start_commit_timeout",E,"Start the commit timeout",7,[[["self"],[R[14]]]]],[11,"check_view_change_timeout_expired",E,"Check to see if the view change timeout has expired",7,[[["self"],[R[14]]],["bool"]]],[11,"start_view_change",E,"Start a view change when this node suspects that the…",7,[[["self"],[R[14]],["u64"]],[[R[2]],[R[10],[R[2]]]]]],[0,"state",R[1],"Information about a PBFT node's state",N,N],[3,R[70],R[50],"Information about the PBFT algorithm's state",N,N],[12,"id",E,"This node's ID",8,N],[12,"seq_num",E,"The node's current sequence number",8,N],[12,"view",E,"The current view",8,N],[12,"chain_head",E,"The block ID of the node's current chain head",8,N],[12,"phase",E,"Current phase of the algorithm",8,N],[12,"mode",E,"Normal operation or view changing",8,N],[12,"member_ids",E,"List of members in the PBFT network, including this node",8,N],[12,"f",E,"The maximum number of faulty nodes in the network",8,N],[12,R[16],E,"Timer used to make sure the primary publishes blocks in a…",8,N],[12,R[17],E,"Timer used to make sure the network doesn't get stuck if…",8,N],[12,"view_change_timeout",E,"When view changing, timer is used to make sure a valid…",8,N],[12,R[18],E,"The duration of the view change timeout; when a view…",8,N],[12,R[19],E,R[20],8,N],[12,R[21],E,R[22],8,N],[12,R[23],E,R[24],8,N],[4,R[71],E,"Phases of the PBFT algorithm, in `Normal` mode",N,N],[13,"PrePreparing",E,E,9,N],[13,"Preparing",E,E,9,N],[13,"Committing",E,E,9,N],[13,"Finishing",E,E,9,N],[4,R[72],E,"Modes that the PBFT algorithm can possibly be in",N,N],[13,"Normal",E,E,10,N],[13,"ViewChanging",E,"Contains the view number of the view this node is…",10,N],[11,"new",E,"Construct the initial state for a PBFT node",8,[[[R[0]],[R[3]],["u64"]],["self"]]],[11,"get_primary_id",E,"Obtain the ID for the primary node in the network",8,[[["self"]],[R[0]]]],[11,"get_primary_id_at_view",E,"Obtain the ID for the primary node at the specified view",8,[[["self"],["u64"]],[R[0]]]],[11,"is_primary",E,"Tell if this node is currently the primary",8,[[["self"]],["bool"]]],[11,"is_primary_at_view",E,"Tell if this node is the primary at the specified view",8,[[["self"],["u64"]],["bool"]]],[11,"switch_phase",E,"Switch to the desired phase if it is the next phase of the…",8,[[["self"],[R[54]]],[[R[2]],[R[10],[R[2]]]]]],[11,"at_forced_view_change",E,E,8,[[["self"]],["bool"]]],[0,"storage",R[1],"Storage trait for syncing writes to an object to a backing…",N,N],[5,"get_storage",R[26],"Given a location string, returns the appropriate storage",N,[[["fn"],["str"]],[["box",["storage"]],[R[25]],[R[10],["box",R[25]]]]]],[0,"disk",E,"Disk-backed persistence wrapper",N,N],[3,R[76],R[51],"A disk-based read guard",N,N],[3,R[77],E,"A disk-based write guard",N,N],[3,R[73],E,"A disk-based RAII-guarded Storage implementation",N,N],[11,"from_path",E,E,11,[[[R[25]],["into",[R[25]]],["fn"]],[[R[10],[R[25]]],[R[25]]]]],[0,"memory",R[26],"Memory-backed persistence wrapper",N,N],[3,R[78],R[52],"Memory-backed read guard",N,N],[3,R[79],E,"Memory-backed write guard",N,N],[3,R[74],E,"Memory-backed RAII-guarded Storage implementation",N,N],[11,"new",E,E,12,[[["fn"]],["self"]]],[8,"StorageReadGuard",R[26],"RAII structure used to allow read access to state object",N,N],[8,"StorageWriteGuard",E,"RAII structure used to allow write access to state object",N,N],[8,"Storage",E,"Storage wrapper that ensures that changes to an object are…",N,N],[16,"S",E,E,13,N],[10,"read",E,E,13,[[["self"]],[[R[27]],["box",[R[27]]]]]],[10,"write",E,E,13,[[["self"]],[["box",[R[28]]],[R[28]]]]],[0,"timing",R[1],"Timing-related structures",N,N],[3,"Ticker",R[53],"Encapsulates calling a function every so often",N,N],[3,"Timeout",E,"A timer that expires after a given duration Check back on…",N,N],[5,"retry_until_ok",E,"With exponential backoff, repeatedly try the callback…",N,[[["fnmut"],[R[29]]],[T]]],[11,"new",E,E,14,[[[R[29]]],["self"]]],[11,"tick",E,E,14,[[["self"],["fnmut"]]]],[11,"new",E,E,15,[[[R[29]]],["self"]]],[11,"check_expired",E,"Update the timer state, and check if the timer is expired",15,[[["self"]],["bool"]]],[11,"start",E,E,15,[[["self"]]]],[11,"stop",E,E,15,[[["self"]]]],[11,"is_active",E,E,15,[[["self"]],["bool"]]],[11,"from",R[1],E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[43],E,E,16,[[["self"]],[T]]],[11,R[44],E,E,16,[[[T],["self"]]]],[11,R[32],E,E,16,[[[U]],[R[10]]]],[11,R[33],E,E,16,[[],[R[10]]]],[11,R[34],E,E,16,[[["self"]],[T]]],[11,R[40],E,E,16,[[["self"]],[T]]],[11,R[36],E,E,16,[[["self"]],[R[41]]]],[11,R[45],E,E,16,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[46],E,E,16,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[47],E,E,16,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[48],E,E,16,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,"from",R[31],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[32],E,E,0,[[[U]],[R[10]]]],[11,R[33],E,E,0,[[],[R[10]]]],[11,R[34],E,E,0,[[["self"]],[T]]],[11,R[40],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"]],[R[41]]]],[11,"from",R[35],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[32],E,E,1,[[[U]],[R[10]]]],[11,R[33],E,E,1,[[],[R[10]]]],[11,R[34],E,E,1,[[["self"]],[T]]],[11,R[40],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"]],[R[41]]]],[11,R[38],R[37],E,2,[[["self"]],[R[25]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[32],E,E,2,[[[U]],[R[10]]]],[11,R[33],E,E,2,[[],[R[10]]]],[11,R[34],E,E,2,[[["self"]],[T]]],[11,R[40],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"]],[R[41]]]],[11,R[38],R[39],E,3,[[["self"]],[R[25]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[32],E,E,3,[[[U]],[R[10]]]],[11,R[33],E,E,3,[[],[R[10]]]],[11,R[34],E,E,3,[[["self"]],[T]]],[11,R[40],E,E,3,[[["self"]],[T]]],[11,R[36],E,E,3,[[["self"]],[R[41]]]],[11,"from",R[42],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[43],E,E,4,[[["self"]],[T]]],[11,R[44],E,E,4,[[[T],["self"]]]],[11,R[32],E,E,4,[[[U]],[R[10]]]],[11,R[33],E,E,4,[[],[R[10]]]],[11,R[34],E,E,4,[[["self"]],[T]]],[11,R[40],E,E,4,[[["self"]],[T]]],[11,R[36],E,E,4,[[["self"]],[R[41]]]],[11,R[45],E,E,4,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[46],E,E,4,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[47],E,E,4,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[48],E,E,4,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[43],E,E,5,[[["self"]],[T]]],[11,R[44],E,E,5,[[[T],["self"]]]],[11,R[32],E,E,5,[[[U]],[R[10]]]],[11,R[33],E,E,5,[[],[R[10]]]],[11,R[34],E,E,5,[[["self"]],[T]]],[11,R[40],E,E,5,[[["self"]],[T]]],[11,R[36],E,E,5,[[["self"]],[R[41]]]],[11,R[45],E,E,5,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[46],E,E,5,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[47],E,E,5,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[48],E,E,5,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[38],E,E,6,[[["self"]],[R[25]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[43],E,E,6,[[["self"]],[T]]],[11,R[44],E,E,6,[[[T],["self"]]]],[11,R[32],E,E,6,[[[U]],[R[10]]]],[11,R[33],E,E,6,[[],[R[10]]]],[11,R[34],E,E,6,[[["self"]],[T]]],[11,R[40],E,E,6,[[["self"]],[T]]],[11,R[36],E,E,6,[[["self"]],[R[41]]]],[11,R[45],E,E,6,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[46],E,E,6,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[47],E,E,6,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[48],E,E,6,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,"from",R[49],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[32],E,E,7,[[[U]],[R[10]]]],[11,R[33],E,E,7,[[],[R[10]]]],[11,R[34],E,E,7,[[["self"]],[T]]],[11,R[40],E,E,7,[[["self"]],[T]]],[11,R[36],E,E,7,[[["self"]],[R[41]]]],[11,R[38],R[50],E,8,[[["self"]],[R[25]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[32],E,E,8,[[[U]],[R[10]]]],[11,R[33],E,E,8,[[],[R[10]]]],[11,R[34],E,E,8,[[["self"]],[T]]],[11,R[40],E,E,8,[[["self"]],[T]]],[11,R[36],E,E,8,[[["self"]],[R[41]]]],[11,R[38],E,E,9,[[["self"]],[R[25]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[43],E,E,9,[[["self"]],[T]]],[11,R[44],E,E,9,[[[T],["self"]]]],[11,R[32],E,E,9,[[[U]],[R[10]]]],[11,R[33],E,E,9,[[],[R[10]]]],[11,R[34],E,E,9,[[["self"]],[T]]],[11,R[40],E,E,9,[[["self"]],[T]]],[11,R[36],E,E,9,[[["self"]],[R[41]]]],[11,R[45],E,E,9,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[46],E,E,9,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[47],E,E,9,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[48],E,E,9,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[43],E,E,10,[[["self"]],[T]]],[11,R[44],E,E,10,[[[T],["self"]]]],[11,R[32],E,E,10,[[[U]],[R[10]]]],[11,R[33],E,E,10,[[],[R[10]]]],[11,R[34],E,E,10,[[["self"]],[T]]],[11,R[40],E,E,10,[[["self"]],[T]]],[11,R[36],E,E,10,[[["self"]],[R[41]]]],[11,R[45],E,E,10,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[46],E,E,10,[[["self"]],[[R[30]],["box",[R[30]]]]]],[11,R[47],E,E,10,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[48],E,E,10,[[["self"]],[["box",[R[30]]],[R[30]]]]],[11,R[38],R[51],E,17,[[["self"]],[R[25]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[32],E,E,17,[[[U]],[R[10]]]],[11,R[33],E,E,17,[[],[R[10]]]],[11,R[34],E,E,17,[[["self"]],[T]]],[11,R[40],E,E,17,[[["self"]],[T]]],[11,R[36],E,E,17,[[["self"]],[R[41]]]],[11,R[38],E,E,18,[[["self"]],[R[25]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[32],E,E,18,[[[U]],[R[10]]]],[11,R[33],E,E,18,[[],[R[10]]]],[11,R[34],E,E,18,[[["self"]],[T]]],[11,R[40],E,E,18,[[["self"]],[T]]],[11,R[36],E,E,18,[[["self"]],[R[41]]]],[11,R[38],E,E,11,[[["self"]],[R[25]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[32],E,E,11,[[[U]],[R[10]]]],[11,R[33],E,E,11,[[],[R[10]]]],[11,R[34],E,E,11,[[["self"]],[T]]],[11,R[40],E,E,11,[[["self"]],[T]]],[11,R[36],E,E,11,[[["self"]],[R[41]]]],[11,R[38],R[52],E,19,[[["self"]],[R[25]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[32],E,E,19,[[[U]],[R[10]]]],[11,R[33],E,E,19,[[],[R[10]]]],[11,R[34],E,E,19,[[["self"]],[T]]],[11,R[40],E,E,19,[[["self"]],[T]]],[11,R[36],E,E,19,[[["self"]],[R[41]]]],[11,R[38],E,E,20,[[["self"]],[R[25]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[32],E,E,20,[[[U]],[R[10]]]],[11,R[33],E,E,20,[[],[R[10]]]],[11,R[34],E,E,20,[[["self"]],[T]]],[11,R[40],E,E,20,[[["self"]],[T]]],[11,R[36],E,E,20,[[["self"]],[R[41]]]],[11,R[38],E,E,12,[[["self"]],[R[25]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[32],E,E,12,[[[U]],[R[10]]]],[11,R[33],E,E,12,[[],[R[10]]]],[11,R[34],E,E,12,[[["self"]],[T]]],[11,R[40],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[["self"]],[R[41]]]],[11,"from",R[53],E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[32],E,E,14,[[[U]],[R[10]]]],[11,R[33],E,E,14,[[],[R[10]]]],[11,R[34],E,E,14,[[["self"]],[T]]],[11,R[40],E,E,14,[[["self"]],[T]]],[11,R[36],E,E,14,[[["self"]],[R[41]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[32],E,E,15,[[[U]],[R[10]]]],[11,R[33],E,E,15,[[],[R[10]]]],[11,R[34],E,E,15,[[["self"]],[T]]],[11,R[40],E,E,15,[[["self"]],[T]]],[11,R[36],E,E,15,[[["self"]],[R[41]]]],[11,"read",R[51],E,11,[[["self"]],[[R[27]],["box",[R[27]]]]]],[11,"write",E,E,11,[[["self"]],[["box",[R[28]]],[R[28]]]]],[11,"read",R[52],E,12,[[["self"]],[[R[27]],["box",[R[27]]]]]],[11,"write",E,E,12,[[["self"]],[["box",[R[28]]],[R[28]]]]],[11,"clone",R[42],E,5,[[["self"]],[R[57]]]],[11,"clone",E,E,4,[[["self"]],[R[5]]]],[11,"clone",E,E,6,[[["self"]],[R[7]]]],[11,"clone",R[50],E,9,[[["self"]],[R[54]]]],[11,"clone",E,E,10,[[["self"]],[R[58]]]],[11,"clone",R[1],E,16,[[["self"]],["pbftcliargs"]]],[11,"from",R[42],E,6,[[["str"]],["self"]]],[11,"drop",R[51],E,18,[[["self"]]]],[11,R[56],R[42],E,6,[[["self"],[R[7]]],[["option",[R[55]]],[R[55]]]]],[11,R[56],R[50],E,9,[[["self"],[R[54]]],[["option",[R[55]]],[R[55]]]]],[11,"lt",E,E,9,[[["self"],[R[54]]],["bool"]]],[11,"le",E,E,9,[[["self"],[R[54]]],["bool"]]],[11,"gt",E,E,9,[[["self"],[R[54]]],["bool"]]],[11,"ge",E,E,9,[[["self"],[R[54]]],["bool"]]],[11,"eq",R[42],E,5,[[["self"],[R[57]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[57]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[5]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[5]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[7]]],["bool"]]],[11,"eq",R[50],E,9,[[["self"],[R[54]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[54]]],["bool"]]],[11,"eq",E,E,10,[[[R[58]],["self"]],["bool"]]],[11,"ne",E,E,10,[[[R[58]],["self"]],["bool"]]],[11,R[59],R[51],E,18,[[["self"]],[T]]],[11,R[59],R[52],E,20,[[["self"]],[T]]],[11,"fmt",R[31],E,0,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[37],E,2,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[42],E,5,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,4,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,6,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[50],E,9,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,10,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,8,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[52],E,19,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,20,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,12,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[53],E,15,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[37],E,2,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[39],E,3,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[42],E,6,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[50],E,9,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,8,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[51],E,17,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,18,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,11,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",R[52],E,19,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,20,[[["self"],[R[60]]],[R[10]]]],[11,"fmt",E,E,12,[[["self"],[R[60]]],[R[10]]]],[11,"deref",R[51],E,17,[[["self"]],[T]]],[11,"deref",E,E,18,[[["self"]],[T]]],[11,"deref",R[52],E,19,[[["self"]],[T]]],[11,"deref",E,E,20,[[["self"]],[T]]],[11,"hash",R[42],E,4,[[["self"],["h"]]]],[11,"description",R[37],E,2,[[["self"]],["str"]]],[11,R[61],R[50],E,9,[[["self"],["__s"]],[R[10]]]],[11,R[61],E,E,10,[[["self"],["__s"]],[R[10]]]],[11,R[61],E,E,8,[[["self"],["__s"]],[R[10]]]],[11,R[61],R[53],E,15,[[["self"],["__s"]],[R[10]]]],[11,R[62],R[50],E,9,[[["__d"]],[R[10]]]],[11,R[62],E,E,10,[[["__d"]],[R[10]]]],[11,R[62],E,E,8,[[["__d"]],[R[10]]]],[11,R[62],R[53],E,15,[[["__d"]],[R[10]]]],[11,"start",R[35],E,1,[[["self"],["receiver",["update"]],["update"],["box",[R[12]]],[R[12]],["startupstate"]],[["error"],[R[10],["error"]]]]],[11,"version",E,E,1,[[["self"]],[R[25]]]],[11,"name",E,E,1,[[["self"]],[R[25]]]]],"p":[[3,R[63]],[3,R[64]],[4,R[65]],[3,"PbftLog"],[3,R[66]],[4,R[67]],[4,R[68]],[3,R[69]],[3,R[70]],[4,R[71]],[4,R[72]],[3,R[73]],[3,R[74]],[8,"Storage"],[3,"Ticker"],[3,"Timeout"],[3,R[75]],[3,R[76]],[3,R[77]],[3,R[78]],[3,R[79]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);